<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAIACoEAAAJgAAABAQAAABACAAaAQAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        /f+J3vf/ieD6/3DF4/Zkt9jYZLfYogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABxv9xkarva+Wi6
        2v9muNj/ZbfX/2S21/9jtdX/ZrjX72m82z5kttcBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////
        8f//4PADAODwA//gMAP/4DAHACAAD//gAD//4AA/ABgAA//4AAH//gABAOgAAf/IAAH/wAA//8AAP//A
        AD//wAA//+AAP///gD///wA///8AP///////////////////////////KAAAABAAAAAgAAAAAQAgAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIqzxwIAAAAAAAAAAAAAAAAAAAAAAAAAAMvLy/+4ubj/pqen/6anp/8AAAAAW8nz/yaI
        tP8AAAAAAAAAAAAAAACIs8decajC/yaItP8miLT/Joi0/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKTK
        2/ewztz/Joi0/wAAAAAAAAAAaKG8/0WQtP9Eyfj/Joi0/wAAAAAAAAAAy8vM/7i5uP+mp6f/pqen/wAA
        AAC91+TUWKC/72+syP9fn72/XKPC9CaItP9Eyfj/Joi0/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAudXhEaXQ4mlWpsmpWK/U/2TH7f8ruvD/NazXtSaItP8AAAAAAAAAAAAAAADMy8v/uLm4/6an
        p/+mp6f/AAAAAAAAAAAAAAAAbbjYcVzA6f9x2v7/RMn4/0W+6P9evd39Joi0/yaItP+JwdkYAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAWLzkDGS73f+B3Pj/mun9/27U+v9byfP/Vbfb/1utzv99vNf4Joi0/8vL
        y/+4ubj/pqen/wAAAABbyfP/AAAAAF264MhwzvD/f8/r/4jY7/+I4Pn/UrLY4GihvP9dsNIkW8nz/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAk9Ts/2e52f9nudn/hMzowWe52f9rweN0WMPo/zCk0qxoobz/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACY0uj/Z7nZ/2e52f+709z/Z7nZ/2rI6P9ju97+aKG8/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGe52f+I0e3bZ7nZ/7vT
        3P8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGe52f+T1Oz/Z7nZ/7vT
        3P8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//8z////K///fx/8JwcL/+MO+/wgHuv/4B7X/DgCw//wA
        AAAUAQAA8AcAAPgH2H3/h9H1/w/S9///zvT//9hh
</value>
  </data>
</root>